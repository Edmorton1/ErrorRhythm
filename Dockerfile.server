# ATTENTION! RUN ONLY IN DOCKER COMPOSE

# Build Stage
FROM node:22-alpine AS builder

# Pnpm install
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

COPY package*.json ./
COPY pnpm-workspace.yaml ./

# INSTALLING LIB FOR CACHING IN DOCKER
COPY libs/shared/package.json ./libs/shared/package.json
COPY libs/types/package.json ./libs/types/package.json
COPY apps/server/package.json ./apps/server/package.json

RUN pnpm install

COPY apps/server ./apps/server
COPY libs/shared ./libs/shared
COPY libs/types ./libs/types

COPY . .

RUN pnpm run build:s

# Production Stage
FROM node:22-alpine AS production

# Pnpm install
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

COPY package*.json ./
COPY pnpm-workspace.yaml ./

COPY apps/server/package*.json ./apps/server/
COPY libs/shared/package*.json ./libs/shared/
COPY libs/types/package*.json ./libs/types/

RUN pnpm install --prod

COPY --from=builder /app/apps/server/dist ./apps/server/dist

EXPOSE 80

CMD ["pnpm", "run", "start:s"]

# docker build -t rhythm-game_server -f Dockerfile.server .
# docker run --name rhythm-game_server -p 3000:80 rhythm-game_server
# docker run -it --rm -p 3000:80 rhythm-game_server sh
# apk add --no-cache curl
